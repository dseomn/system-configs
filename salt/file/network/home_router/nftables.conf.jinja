# Copyright 2021 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

{% from 'network/firewall/map.jinja' import nftables, to_set, to_set_elements %}

{% set host = pillar.network.hosts[grains.id] %}
{% set segments = pillar.network.segments %}
{% set site = pillar.network.sites[host.site] %}
{% set global = pillar.network.global %}


{% set upstream_interfaces = [] %}
{% for interface_name, interface in host.interfaces.items()
    if interface.get('upstream', false) -%}
  {%- do upstream_interfaces.append(interface_name) -%}
{%- endfor %}

{% set wireguard_interfaces = [] %}
{% for interface_name, interface in host.interfaces.items()
    if 'wireguard' in interface -%}
  {%- do wireguard_interfaces.append(interface_name) -%}
{%- endfor %}

{% set home_router_interfaces = [] %}
{% set dnat_services = [] %}
{% set dnat_services_with_interface = [] %}
{% set dnat_dest_by_service = [] %}
{% for interface_name, interface in host.interfaces.items()
    if 'home_router' in interface -%}
  {%- do home_router_interfaces.append(interface_name) -%}
  {%- for other_host in interface.home_router.get('hosts', {}).values() -%}
    {%- set other_host_ipv4 = '10.{}.{}.{}'.format(
	site.id,
	segments[interface.segment].id,
	other_host.interface_id,
    ) -%}
    {%- for service in other_host.get('services', ()) -%}
      {%- for l4proto in ('tcp', 'udp') if l4proto in service -%}
	{%- set port_str = '{}'.format(service[l4proto]) -%}
	{%- set dnat_service = '{} . {}'.format(l4proto, port_str) -%}
	{%- do dnat_services.append(dnat_service) -%}
	{%- do dnat_services_with_interface.append('{} . {}'.format(
	    dnat_service,
	    interface_name,
	)) -%}
	{%- do dnat_dest_by_service.append('{} : {}'.format(
	    dnat_service,
	    other_host_ipv4,
	)) -%}
      {%- endfor -%}
    {%- endfor -%}
  {%- endfor -%}
{%- endfor %}


define DNAT_MARKS = {{ to_set((
    nftables.mark.dnat,
    nftables.mark.dnat_hairpin,
)) }}

table inet filter {
	set upstream_interfaces {
		type ifname
		flags constant
		{{ to_set_elements(upstream_interfaces) }}
	}

	set wireguard_interfaces {
		type ifname
		flags constant
		{{ to_set_elements(wireguard_interfaces) }}
	}

	set home_router_interfaces {
		type ifname
		flags constant
		{{ to_set_elements(home_router_interfaces) }}
	}

	set services_ipv4 {
		type ifname . ipv4_addr . inet_proto . inet_service
	}

	set services_ipv6 {
		type ifname . ipv6_addr . inet_proto . inet_service
	}

	chain prerouting {
		fib saddr . iif oif missing drop
		iifname @upstream_interfaces ip saddr 10.0.0.0/8 drop
		iifname @upstream_interfaces ip6 saddr {{ global.ula }}::/48 \
			drop
	}

	chain input {
		iifname @home_router_interfaces tcp dport domain accept
		iifname @home_router_interfaces udp dport domain accept
		iifname @wireguard_interfaces tcp dport domain accept
		iifname @wireguard_interfaces udp dport domain accept
		iifname @home_router_interfaces meta nfproto ipv4 \
			udp sport bootpc udp dport bootps accept
		iifname @home_router_interfaces meta nfproto ipv6 \
			udp sport dhcpv6-client udp dport dhcpv6-server accept
	}

	chain forward {
		oifname . ip daddr . meta l4proto . th dport @services_ipv4 \
			accept
		oifname . ip6 daddr . meta l4proto . th dport @services_ipv6 \
			accept
	}

	chain postrouting {
		oifname @upstream_interfaces ip daddr 10.0.0.0/8 drop
		oifname @upstream_interfaces ip6 daddr {{ global.ula }}::/48 \
			drop
	}
}

table ip nat {
	set masquerade_ipv4_addrs {
		type ipv4_addr
	}

	set dnat_services {
		type inet_proto . inet_service
		flags constant
		{{ to_set_elements(dnat_services) }}
	}

	set dnat_services_with_interface {
		type inet_proto . inet_service . ifname
		flags constant
		{{ to_set_elements(dnat_services_with_interface) }}
	}

	map dnat_dest_by_service {
		type inet_proto . inet_service : ipv4_addr
		flags constant
		{{ to_set_elements(dnat_dest_by_service) }}
	}

	chain dstnat {
		ip daddr @masquerade_ipv4_addrs \
			fib daddr type local \
			meta l4proto . th dport @dnat_services \
			meta mark set {{ nftables.mark.dnat }}
		mark {{ nftables.mark.dnat }} \
			meta l4proto . th dport . iifname \
			@dnat_services_with_interface \
			meta mark set {{ nftables.mark.dnat_hairpin }}
		mark $DNAT_MARKS \
			dnat meta l4proto . th dport map @dnat_dest_by_service
	}

	chain postrouting {
		mark {{ nftables.mark.dnat_hairpin }} \
			masquerade persistent,fully-random
	}
}
