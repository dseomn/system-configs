#!/usr/bin/env python3

# Copyright 2021 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import abc
import argparse
import collections
import contextlib
import datetime
import json
import os
import pathlib
import subprocess
import tempfile
from typing import ContextManager, Optional, Sequence

_NOW_UTC = datetime.datetime.now(tz=datetime.timezone.utc)

# {% from 'backup/map.jinja' import backup %}
_SOURCES_DIR = pathlib.Path('{{ backup.config_dir }}/source/sources.d')


class _Source(abc.ABC):
    """Something to back up.

    Attributes:
        name: File/directory name that data will be backed up under.
        path: Same as above, but a pathlib.Path.
    """

    def __init__(self, name: str):
        self.name = name
        self.path = pathlib.Path(name)

    @abc.abstractmethod
    def context(self) -> ContextManager[None]:
        """Returns a context manager for the file/directory to be backed up.

        __enter__() creates the file/directory, and __exit__() removes it.
        """


class _ConstantSource(_Source):
    """Constant data to back up to a file."""

    def __init__(
        self,
        name: str,
        *,
        data: str,
    ):
        super().__init__(name)
        self._data = data

    @contextlib.contextmanager
    def context(self) -> ContextManager[None]:
        """See base class."""
        with contextlib.ExitStack() as exit_stack:
            with self.path.open(mode='xt') as backup_file:
                exit_stack.callback(self.path.unlink)
                backup_file.write(self._data)
            yield


class _LvmThinSnapshotSource(_Source):
    """A mount point of an LVM thin snapshot of a volume to back up."""

    def __init__(
        self,
        name: str,
        *,
        vg: str,
        lv: str,
    ):
        """Initializer.

        Args:
            name: See _Source.
            vg: VG with the volume to snapshot and back up.
            lv: Thin LV to snapshot and back up.
        """
        super().__init__(name)
        self._vg = vg
        self._lv = lv

    @contextlib.contextmanager
    def context(self) -> ContextManager[None]:
        """See base class."""
        snapshot_lv = f'backup_{_NOW_UTC.strftime("%Y%m%dT%H%M%SZ")}_{self._lv}'

        with contextlib.ExitStack() as exit_stack:
            subprocess.run(
                (
                    'lvcreate',
                    '--quiet',
                    '--quiet',
                    '--snapshot',
                    '--setactivationskip=n',
                    f'--name={snapshot_lv}',
                    '--',
                    f'{self._vg}/{self._lv}',
                ),
                check=True,
            )
            exit_stack.callback(
                subprocess.run,
                (
                    'lvremove',
                    '--quiet',
                    '--quiet',
                    '--yes',
                    '--',
                    f'{self._vg}/{snapshot_lv}',
                ),
                check=True,
            )

            subprocess.run(
                ('fsck', '-T', f'/dev/{self._vg}/{snapshot_lv}', '--', '-p'),
                check=True,
                stdout=subprocess.DEVNULL,
            )

            self.path.mkdir()
            exit_stack.callback(self.path.rmdir)

            subprocess.run(
                (
                    'mount',
                    '-o',
                    'ro',
                    '--',
                    f'/dev/{self._vg}/{snapshot_lv}',
                    str(self.path),
                ),
                check=True,
            )
            exit_stack.callback(
                subprocess.run,
                ('umount', '--', str(self.path)),
                check=True,
            )

            yield


_SOURCE_FACTORY_BY_TYPE = {
    'lvm_thin_snapshot': _LvmThinSnapshotSource,
}


def _args():
    parser = argparse.ArgumentParser(description=(
        'Run the given command in a directory with files to back up.'))
    parser.add_argument(
        '--backup-dir',
        default=None,
        type=pathlib.Path,
        help=(
            'Directory to create and populate with files to back up. Must not '
            'already exist. Default: create a temporary directory.'),
    )
    parser.add_argument(
        'command',
        nargs='+',
        help='Command and args to run.',
    )
    return parser.parse_args()


def _sources() -> Sequence[_Source]:
    source_files = []
    for source_path in sorted(_SOURCES_DIR.iterdir()):
        with source_path.open(mode='rb') as source_file:
            source_files.append(json.load(source_file))

    sources = [
        _ConstantSource(
            '.config',
            data=json.dumps(dict(sources=source_files)),
        ),
    ]
    for source_file in source_files:
        source_name = source_file['name']
        source_type = source_file['type']
        source_config = source_file['config']
        source_factory = _SOURCE_FACTORY_BY_TYPE[source_type]
        sources.append(source_factory(source_name, **source_config))

    source_name_counts = collections.Counter(source.name for source in sources)
    source_name_duplicates = tuple(
        source_name for source_name, source_count in source_name_counts.items()
        if source_count > 1)
    if source_name_duplicates:
        raise ValueError(f'Duplicate source names: {source_name_duplicates!r}')

    return sources


@contextlib.contextmanager
def _backup_dir(
        backup_dir: Optional[pathlib.Path]) -> ContextManager[pathlib.Path]:
    if backup_dir is None:
        with tempfile.TemporaryDirectory() as temp_dir:
            yield pathlib.Path(temp_dir)
    else:
        backup_dir.mkdir(mode=0o700)
        try:
            yield backup_dir
        finally:
            backup_dir.rmdir()


def main() -> None:
    args = _args()
    sources = _sources()
    with contextlib.ExitStack() as exit_stack:
        backup_dir = exit_stack.enter_context(_backup_dir(args.backup_dir))
        exit_stack.callback(os.chdir, os.getcwd())
        os.chdir(backup_dir)
        for source in sources:
            exit_stack.enter_context(source.context())
        subprocess.run(
            args.command,
            check=True,
        )


if __name__ == '__main__':
    main()
