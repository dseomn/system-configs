{#
 # Copyright 2021 Google LLC
 #
 # Licensed under the Apache License, Version 2.0 (the "License");
 # you may not use this file except in compliance with the License.
 # You may obtain a copy of the License at
 #
 #     https://www.apache.org/licenses/LICENSE-2.0
 #
 # Unless required by applicable law or agreed to in writing, software
 # distributed under the License is distributed on an "AS IS" BASIS,
 # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 # See the License for the specific language governing permissions and
 # limitations under the License.
 #}


{% from 'crypto/map.jinja' import crypto %}


{% set stunnel = salt.grains.filter_by({
    'Debian': {
        'pkgs': [
            'stunnel4',
        ],
        'user': 'stunnel4',
        'group': 'stunnel4',
        'config_dir': '/etc/stunnel',
        'service_instance': 'stunnel@{}.service',
        'boilerplate': '\n'.join((
            'foreground = quiet',
            'pid =',
        )),
    },
}) %}
{% do stunnel.update({'service_instance': stunnel.service_instance.format}) %}


{#
 # WARNING: Be careful about access control on the cleartext side of a tunnel.
 #
 # For a server, `connect` should point somewhere that does not traverse the
 # network and that only an authorized server can listen on, i.e., a unix socket
 # in a directory with restricted permissions, or a port under 1024 on
 # localhost.
 #
 # For a server with non-None `peer_certs`, in addition to the above
 # restrictions, only authorized clients should be able to connect to the
 # `connect` server, so it should be a unix socket with restricted permissions
 # on the socket itself.
 #
 # For a client, `accept` should not accept connections that traverse the
 # network and it should not be possible to listen on by unauthorized local
 # servers, i.e., it should be a unix socket in a directory with restricted
 # permissions, or a firewalled port under 1024 on localhost.
 #
 # For a client with a client certificate, in addition to the above
 # restrictions, `accept` should only accept connections from clients authorized
 # to use that client certificate, i.e., it should be a unix socket with
 # restricted permissions on the socket itself.
 #}
{% macro _instance(
    instance_name,
    client,
    level,
    accept,
    connect,
    setuid=stunnel.user,
    setgid=stunnel.group,
    key=None,
    cert=None,
    peer_certs=None,
    require=()) %}
{% set service_instance = stunnel.service_instance(instance_name) %}
{% set peer_name = 'server' if client else 'client' %}

{% if peer_certs is not none %}
{{ stunnel.config_dir }}/{{ instance_name }}_{{ peer_name }}_certs.pem:
  file.managed:
  - contents: {{ peer_certs | join('\n') | tojson }}
  - require:
    - {{ stunnel.config_dir }} exists
  - require_in:
    - {{ stunnel.config_dir }} is clean
{% endif %}

{{ stunnel.config_dir }}/{{ instance_name }}.conf:
  file.managed:
  - contents: |
      {{ stunnel.boilerplate | indent(6) }}
      setuid = {{ setuid }}
      setgid = {{ setgid }}
      [{{ instance_name }}]
      client = {{ 'yes' if client else 'no' }}
      accept = {{ accept }}
      sslVersionMin = {{ crypto.openssl[level + '_protocols_min'] }}
      ciphers = {{ crypto.openssl.ciphers_to_string(
          crypto.openssl[level + '_ciphers']) }}
      {%- if key is not none and cert is not none %}
      key = {{ key }}
      cert = {{ cert }}
      {%- endif %}
      {%- if client %}
      sni = {{ connect.rpartition(':')[0] }}
      {%- endif %}
      {%- if peer_certs is not none %}
      CAfile = {{ stunnel.config_dir }}/{{ instance_name }}_{{ peer_name }}_certs.pem
      verifyPeer = yes
      {%- endif %}
      connect = {{ connect }}
  - require:
    - {{ stunnel.config_dir }} exists
    {% if key is not none and cert is not none %}
    - {{ key }}
    - {{ cert }}
    {% endif %}
    {% if peer_certs is not none %}
    - {{ stunnel.config_dir }}/{{ instance_name }}_{{ peer_name }}_certs.pem
    {% endif %}
    {% for requirement in require %}
    - {{ requirement | tojson }}
    {% endfor %}
  - require_in:
    - {{ stunnel.config_dir }} is clean

{{ service_instance }} is enabled:
  service.enabled:
  - name: {{ service_instance }}
  - require:
    - {{ stunnel.config_dir }}/{{ instance_name }}.conf
{{ service_instance }} is running:
  service.running:
  - name: {{ service_instance }}
  - watch:
    {% if peer_certs is not none %}
    - {{ stunnel.config_dir }}/{{ instance_name }}_{{ peer_name }}_certs.pem
    {% endif %}
    - {{ stunnel.config_dir }}/{{ instance_name }}.conf
{% endmacro %}


{% do stunnel.update({
    'instance': _instance,
}) %}
