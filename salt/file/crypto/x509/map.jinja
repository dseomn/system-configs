{#
 # Copyright 2021 Google LLC
 #
 # Licensed under the Apache License, Version 2.0 (the "License");
 # you may not use this file except in compliance with the License.
 # You may obtain a copy of the License at
 #
 #     https://www.apache.org/licenses/LICENSE-2.0
 #
 # Unless required by applicable law or agreed to in writing, software
 # distributed under the License is distributed on an "AS IS" BASIS,
 # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 # See the License for the specific language governing permissions and
 # limitations under the License.
 #}


{% from 'acme/map.jinja' import acme, acme_cert %}
{% from 'common/map.jinja' import common %}
{% from 'crypto/map.jinja' import crypto %}


{% macro _boilerplate_certificate(name, warning_on_change, group='root') %}
boilerplate_certificate_{{ name }}:
  cmd.run:
  - name: >-
      mkdir -p {{ common.local_etc }}/x509/{{ name }}
      &&
      {{ common.local_bin }}/boilerplate-certificate
      --name={{ name }}
      --key={{ common.local_etc }}/x509/{{ name }}/privkey.pem
      --cert={{ common.local_etc }}/x509/{{ name }}/cert.pem
      --key-algorithm={{ crypto.openssl.strict_key_algorithm }}
      {%- for key_option in crypto.openssl.strict_key_options %}
      --key-option={{ key_option }}
      {%- endfor %}
      --days={{ crypto.secret_validity_period_days }}
      &&
      openssl x509
      -in {{ common.local_etc }}/x509/{{ name }}/cert.pem
      -{{ crypto.openssl.digest }}
      -fingerprint
  - creates:
    - {{ common.local_etc }}/x509/{{ name }}/privkey.pem
    - {{ common.local_etc }}/x509/{{ name }}/cert.pem
  - require:
    - {{ common.local_etc }}/x509
    - {{ common.local_bin }}/boilerplate-certificate
  test.configurable_test_state:
  - warnings: {{ warning_on_change | json }}
  - onchanges:
    - cmd: boilerplate_certificate_{{ name }}

{{ common.local_etc }}/x509/{{ name }}/privkey.pem:
  file.managed:
  - create: false
  - replace: false
  - group: {{ group }}
  - mode: 0640
  - require:
    - boilerplate_certificate_{{ name }}
{{ common.local_etc }}/x509/{{ name }}/privkey.pem should be rotated:
  file.accumulated:
  - name: boilerplate certificate keys
  - filename: {{ common.local_sbin }}/monitor-secret-age
  - text: {{ common.local_etc }}/x509/{{ name }}/privkey.pem
  - require:
    - {{ common.local_etc }}/x509/{{ name }}/privkey.pem
  - require_in:
    - file: {{ common.local_sbin }}/monitor-secret-age

{{ common.local_etc }}/x509/{{ name }}/cert.pem:
  file.exists:
  - require:
    - boilerplate_certificate_{{ name }}
{{ common.local_etc }}/x509/{{ name }}/cert.pem should be rotated:
  file.accumulated:
  - name: boilerplate certificates
  - filename: {{ common.local_sbin }}/monitor-x509-validity-period
  - text: {{ common.local_etc }}/x509/{{ name }}/cert.pem
  - require:
    - {{ common.local_etc }}/x509/{{ name }}/cert.pem
  - require_in:
    - file: {{ common.local_sbin }}/monitor-x509-validity-period
{% endmacro %}


{#
 # Creates multiple certificates of different types.
 #
 # Args:
 #  certificates_in: Mapping from certificate name to a mapping that determines
 #    how to create the certificate. The inner mapping has a single key, 'type'
 #    that can be either 'general' or 'strict'.
 #  warning_on_boilerplate_cert_change: See the warning_on_change parameter to
 #    boilerplate_certificate.
 #  certificates_out: Pass in an empty mutable mapping, and it will be modified
 #    to have keys matching certificates_in. Values will be mappings with keys
 #    'key' (path to private key), 'fullchain' (path to EE cert or full cert
 #    chain), and 'onchanges' (collection of states to use in onchanges
 #    requisites to run when the certificate changes).
 #}
{% macro _certificates(
    certificates_in,
    warning_on_boilerplate_cert_change,
    certificates_out) %}
{% for certificate_name, certificate in certificates_in.items() %}

{% if certificate.type == 'general' %}

{{ acme_cert(certificate_name) }}
{% do certificates_out.update({
    certificate_name: {
        'key':
            acme.certbot_config_dir + '/live/' + certificate_name +
            '/privkey.pem',
        'fullchain':
            acme.certbot_config_dir + '/live/' + certificate_name +
            '/fullchain.pem',
        'onchanges': ('acme_cert_' + certificate_name,),
    }
}) %}

{% elif certificate.type == 'strict' %}

{{ _boilerplate_certificate(
    certificate_name, warning_on_change=warning_on_boilerplate_cert_change) }}
{% do certificates_out.update({
    certificate_name: {
        'key': common.local_etc + '/x509/' + certificate_name + '/privkey.pem',
        'fullchain':
            common.local_etc + '/x509/' + certificate_name + '/cert.pem',
        'onchanges': ('boilerplate_certificate_' + certificate_name,),
    }
}) %}

{% else %}

{{ {}['error: unknown certificate type: ' + certificate.type] }}

{% endif %}

{% endfor %}
{% endmacro %}


{% set x509 = {
    'boilerplate_certificate': _boilerplate_certificate,
    'certificates': _certificates,
} %}
